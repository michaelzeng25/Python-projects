1, mean, median, and mode

import numpy as np
from scipy import stats

n, l = [ input().split() for x in range(2)]

# convert the list to int type and use the built in fuctions of mean and median from the numpy library
l = list(map(int, l))
print(np.mean(l))
print(np.median(l))

# numpy does not have a built-in fuction for the mode, this library has it.
# m[0] returns the value and m[1] returns the total number of occurance of that value
m = stats.mode(l)
print(int(m[1]))







2, weighted mean

n, l1, l2 = [input().split() for x in range(3)]
l1, l2 = list(map(int, l1)), list(map(int, l2))
s = sum(l2)

# using map and lambda. map(lan, l1, l2) will return a single with square values of the same index from the previous lists
lan = lambda x, y: x * y
an = sum(map(lan, l1, l2))

# print the answer in 1 decimnal place
print("%.1f" % (an/s))








3, quartile

n, a =(input().split() for x in range(2))
a=list(map(int, a))
a.sort()
le = len(a)

if(le%2==0):
    half_le = int((le)/2)
    h = int(half_le/2)
    right_begin = half_le
    print(int((a[h - 1] + a[h]) / 2 if half_le%2==0 else a[h]))
    print(int((a[half_le-1] + a[half_le] ) / 2))
    print(int((a[right_begin + h - 1] + a[right_begin + h]) / 2 if half_le%2==0 else a[right_begin + h]))
else:
    half_le = int(le/2) 
    h = int(half_le/2)
    right_begin = half_le+1
    print(int((a[h - 1] + a[h]) / 2 if half_le%2==0 else a[h]))
    print(int(a[half_le]))
    print(int((a[right_begin + h - 1] + a[right_begin + h]) / 2 if half_le%2==0 else a[right_begin + h]))
    
    
 note:
 1,2,3,4,5 = (1,2) and (4,5)
 1,2,3,4,5,6=(1,2,3) and *(4,5,6)
 
 
 
 
 4, interquartile range
n, a2, b =(input().split() for x in range(3))
a2, b=list(map(int, a2)), list(map(int, b))

# create a new list that with repeative values of a2 with the frequency of each corresponding value in b
lea = len(a2)
ind = 0
a=[]
for i in range(lea):
    for j in range(b[ind]):
        a.append(a2[i])
    ind+=1
  
a.sort()  
le = len(a)
if(le%2==0):
    half_le = int((le)/2)
    h = int(half_le/2)
    right_begin = half_le
    q1=(int((a[h - 1] + a[h]) / 2 if half_le%2==0 else a[h]))
    q2=(int((a[half_le-1] + a[half_le] ) / 2))
    q3=(int((a[right_begin + h - 1] + a[right_begin + h]) / 2 if half_le%2==0 else a[right_begin + h]))
    print("%.1f"% (q3-q1))
else:
    half_le = int(le/2) 
    h = int(half_le/2)
    right_begin = half_le+1
    q1=(int((a[h - 1] + a[h]) / 2 if half_le%2==0 else a[h]))
    q2=(int(a[half_le]))
    q3=(int((a[right_begin + h - 1] + a[right_begin + h]) / 2 if half_le%2==0 else a[right_begin + h]))
    print("%.1f"% (q3-q1))




5, std

import math
n, l=int(input()), list(map(int,(input().split())))
mu = sum(l)/n

l2=[]
for i in range(len(l)):
    l2.append(pow(l[i]-mu,2))
print("%.1f"%  (math.sqrt(sum(l2)/n)))

